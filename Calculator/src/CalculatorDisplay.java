/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author leonard Abou-Assaleh
 */
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;
//import java.util.Map;
public class CalculatorDisplay extends javax.swing.JFrame {

    /**
     * Creates new form CalculatorDisplay
     */
    public CalculatorDisplay() {
        initComponents();
        priority.put("(", -1);
        priority.put("+", 0);
        priority.put("-", 0);
        priority.put("x", 1);
        priority.put("÷", 1);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDisplay = new javax.swing.JTextField();
        btn3 = new javax.swing.JButton();
        btnDivide = new javax.swing.JButton();
        btn2 = new javax.swing.JButton();
        btnPlus = new javax.swing.JButton();
        btnMultiply = new javax.swing.JButton();
        btnMinus = new javax.swing.JButton();
        btn1 = new javax.swing.JButton();
        btn4 = new javax.swing.JButton();
        btn6 = new javax.swing.JButton();
        btn5 = new javax.swing.JButton();
        btn7 = new javax.swing.JButton();
        btn9 = new javax.swing.JButton();
        btn8 = new javax.swing.JButton();
        btn0 = new javax.swing.JButton();
        btnCloseBrackets = new javax.swing.JButton();
        btnOpenBrackets = new javax.swing.JButton();
        btnEquals = new javax.swing.JButton();
        btnAC = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        nearestInt = new javax.swing.JMenuItem();
        roundUp = new javax.swing.JMenuItem();
        roundDown = new javax.swing.JMenuItem();
        dontRound = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");

        txtDisplay.setEditable(false);
        txtDisplay.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N

        btn3.setBackground(new java.awt.Color(102, 102, 102));
        btn3.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn3.setForeground(new java.awt.Color(255, 255, 255));
        btn3.setText("3");
        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3ActionPerformed(evt);
            }
        });

        btnDivide.setBackground(new java.awt.Color(255, 175, 83));
        btnDivide.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btnDivide.setForeground(new java.awt.Color(255, 255, 255));
        btnDivide.setText("÷");
        btnDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDivideActionPerformed(evt);
            }
        });

        btn2.setBackground(new java.awt.Color(102, 102, 102));
        btn2.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn2.setForeground(new java.awt.Color(255, 255, 255));
        btn2.setText("2");
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });

        btnPlus.setBackground(new java.awt.Color(255, 175, 83));
        btnPlus.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btnPlus.setForeground(new java.awt.Color(255, 255, 255));
        btnPlus.setText("+");
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });

        btnMultiply.setBackground(new java.awt.Color(255, 175, 83));
        btnMultiply.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btnMultiply.setForeground(new java.awt.Color(255, 255, 255));
        btnMultiply.setText("×");
        btnMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplyActionPerformed(evt);
            }
        });

        btnMinus.setBackground(new java.awt.Color(255, 175, 83));
        btnMinus.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btnMinus.setForeground(new java.awt.Color(255, 255, 255));
        btnMinus.setText("–");
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });

        btn1.setBackground(new java.awt.Color(102, 102, 102));
        btn1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn1.setForeground(new java.awt.Color(255, 255, 255));
        btn1.setText("1");
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });

        btn4.setBackground(new java.awt.Color(102, 102, 102));
        btn4.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn4.setForeground(new java.awt.Color(255, 255, 255));
        btn4.setText("4");
        btn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn4ActionPerformed(evt);
            }
        });

        btn6.setBackground(new java.awt.Color(102, 102, 102));
        btn6.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn6.setForeground(new java.awt.Color(255, 255, 255));
        btn6.setText("6");
        btn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn6ActionPerformed(evt);
            }
        });

        btn5.setBackground(new java.awt.Color(102, 102, 102));
        btn5.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn5.setForeground(new java.awt.Color(255, 255, 255));
        btn5.setText("5");
        btn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn5ActionPerformed(evt);
            }
        });

        btn7.setBackground(new java.awt.Color(102, 102, 102));
        btn7.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn7.setForeground(new java.awt.Color(255, 255, 255));
        btn7.setText("7");
        btn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn7ActionPerformed(evt);
            }
        });

        btn9.setBackground(new java.awt.Color(102, 102, 102));
        btn9.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn9.setForeground(new java.awt.Color(255, 255, 255));
        btn9.setText("9");
        btn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn9ActionPerformed(evt);
            }
        });

        btn8.setBackground(new java.awt.Color(102, 102, 102));
        btn8.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn8.setForeground(new java.awt.Color(255, 255, 255));
        btn8.setText("8");
        btn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn8ActionPerformed(evt);
            }
        });

        btn0.setBackground(new java.awt.Color(102, 102, 102));
        btn0.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btn0.setForeground(new java.awt.Color(255, 255, 255));
        btn0.setText("0");
        btn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn0ActionPerformed(evt);
            }
        });

        btnCloseBrackets.setBackground(new java.awt.Color(102, 102, 102));
        btnCloseBrackets.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btnCloseBrackets.setForeground(new java.awt.Color(255, 255, 255));
        btnCloseBrackets.setText(")");
        btnCloseBrackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseBracketsActionPerformed(evt);
            }
        });

        btnOpenBrackets.setBackground(new java.awt.Color(102, 102, 102));
        btnOpenBrackets.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btnOpenBrackets.setForeground(new java.awt.Color(255, 255, 255));
        btnOpenBrackets.setText("(");
        btnOpenBrackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenBracketsActionPerformed(evt);
            }
        });

        btnEquals.setBackground(new java.awt.Color(255, 175, 83));
        btnEquals.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        btnEquals.setForeground(new java.awt.Color(255, 255, 255));
        btnEquals.setText("=");
        btnEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEqualsActionPerformed(evt);
            }
        });

        btnAC.setBackground(new java.awt.Color(204, 204, 204));
        btnAC.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnAC.setText("AC");
        btnAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnACActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jMenu1.setText("Output");

        jMenu2.setText("rounding");

        nearestInt.setText("nearest integer");
        nearestInt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nearestIntActionPerformed(evt);
            }
        });
        jMenu2.add(nearestInt);

        roundUp.setText("up");
        roundUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundUpActionPerformed(evt);
            }
        });
        jMenu2.add(roundUp);

        roundDown.setText("down");
        roundDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundDownActionPerformed(evt);
            }
        });
        jMenu2.add(roundDown);

        dontRound.setText("none");
        dontRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dontRoundActionPerformed(evt);
            }
        });
        jMenu2.add(dontRound);

        jMenu1.add(jMenu2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDisplay)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnOpenBrackets, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn0, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCloseBrackets, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAC, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMultiply, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDivide, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMinus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPlus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEquals, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(txtDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAC, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnDivide, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEquals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btn8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btn5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btn2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn0, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnCloseBrackets, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnOpenBrackets, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //define global variable
    String expression = "";
    String evalExpression = "( ";
    int round = -1;
    double total;
    static HashMap<String, Integer> priority = new HashMap<>();
    
    // Check if the input is an integer.
    public static boolean isInteger(String input) {
        try {
            Integer.parseInt(input);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    // Evaluate the postFix expression.
    public static String evaluate(ArrayList <String> values){
        
        // Define local variables
        int answer;
        double val2;
        double val1;
        String calculation;
        var stk = new Stack();
        
        // Loop through all values in the postFix expression.
        for(var i : values){  
            
            // Check if the value is an integer using the custom method isInteger.
            if(isInteger(i)) {
                stk.push(i);
            } else {
                
                // Check which operator the current value is and evaluates using that operator.
                switch(i) {
                    case "+":
                        val2 = Double.parseDouble(stk.pop().toString());
                        val1 = Double.parseDouble( stk.pop().toString());
                        stk.push(val1+val2);
                        break;
                    case "-":
                        val2 = Double.parseDouble(stk.pop().toString());
                        val1 = Double.parseDouble( stk.pop().toString());
                        stk.push(val1-val2);
                        break;
                    case "x":
                        val2 = Double.parseDouble(stk.pop().toString());
                        val1 = Double.parseDouble( stk.pop().toString());
                        stk.push(val1*val2);
                        break;
                    case "÷":
                        val2 = Double.parseDouble(stk.pop().toString());
                        val1 = Double.parseDouble( stk.pop().toString());
                        stk.push(val1/val2);
                        break;
                }  
            }
        }
        
        // Returns the fully evaluated postFix expression as a String.
        return stk.peek().toString();
    }
    
    // Changes inFix expression to a postFix expression.
    public static ArrayList<String> postFix(String values){
        
        // Define local variables
        String[] inFix = values.split(" ");
        var postFix = new ArrayList<String>();
        var stk = new Stack();
        
        // Loop through all values in the expression.
        for(var i : inFix) {
            
            // Check if the value is an integer using the custom method isInteger.
            if(isInteger(i)) {
                postFix.add(i); 
                
            // Checks if the value is null.
            } else if(i.equals("")) {
                
                // Skip the rest of the code for this round of the loop.
                continue;
                
            // Check if the value is ).
            } else if(i.equals(")")) {
                
                // Define a local variable
                String val;
                
                // Loop through all values in the stack untill the top value is ( than loops one more time.
                do {
                    
                  // Remove the top value of the stack and type cast it into a string.
                  val = (String) stk.pop();
                  
                  // Add the value that was removed from the stack into the postFix expression.
                  postFix.add(val);
                }
                
                // Ensure the loop continues running as long as val is not equal to (.
                while (!"(".equals(val));    
                
                // Remove the last value of the postFix expression as the value ( is not needed in the postFix expression.
                postFix.remove(postFix.size()-1);
            } else {
                
                // Ensure that the stack is not empty to prevent EmptyStack error.
                if(stk.isEmpty() == false){
                    
                    // Set val to the top value of the stack.
                    String val = (String) stk.peek();
                    
                    // Check if there are operators of higher or the same priority within the stack
                    // Ensures that the operator is not (.
                    // If these are all true, loops untill one of the conditions are false.
                    while(priority.get(val) >= priority.get(i) && !stk.peek().equals("(") && !i.equals("(")){
                        
                        // Remove the top value of the stack.
                        String currentval = (String) stk.pop();
                        
                        // Add the removed value to the postFix expression.
                        postFix.add(currentval);
                    }
                    
                    // Add the value being iterated upon to the stack.
                    stk.push(i);
                } else {
                    
                    // Add the value being iterated upon to the stack.
                    stk.push(i);
                }
            }
        }
        
        // Return the postFix expression.
        return postFix;
    }
    
    // Update the display.
    public void Display(){
        txtDisplay.setText(expression);
    }
    
    // Update what is to be displayed as well as the internal expression.
    private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3ActionPerformed
        expression += "3";
        evalExpression += "3";
        Display();
    }//GEN-LAST:event_btn3ActionPerformed

    private void btnDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDivideActionPerformed
        expression += "÷";
        evalExpression += " ÷ ";
        Display();
    }//GEN-LAST:event_btnDivideActionPerformed

    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed
        expression += "2";
        evalExpression += "2";
        Display();
    }//GEN-LAST:event_btn2ActionPerformed

    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed
        expression += "+";
        evalExpression += " + ";
        Display();
    }//GEN-LAST:event_btnPlusActionPerformed

    private void btnMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplyActionPerformed
        expression += "×";
        evalExpression += " x ";
        Display();
    }//GEN-LAST:event_btnMultiplyActionPerformed

    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        expression += "–";
        evalExpression += " - ";
        Display();
    }//GEN-LAST:event_btnMinusActionPerformed

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed
        expression += "1";
        evalExpression += "1";
        Display();
    }//GEN-LAST:event_btn1ActionPerformed

    private void btn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn4ActionPerformed
        expression += "4";
        evalExpression += "4";
        Display();
    }//GEN-LAST:event_btn4ActionPerformed

    private void btn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn6ActionPerformed
        expression += "6";
        evalExpression += "6";
        Display();
    }//GEN-LAST:event_btn6ActionPerformed

    private void btn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn5ActionPerformed
        expression += "5";
        evalExpression += "5";
        Display();
    }//GEN-LAST:event_btn5ActionPerformed

    private void btn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn7ActionPerformed
        expression += "7";
        evalExpression += "7";
        Display();
    }//GEN-LAST:event_btn7ActionPerformed

    private void btn9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn9ActionPerformed
        expression += "9";
        evalExpression += "9";
        Display();
    }//GEN-LAST:event_btn9ActionPerformed

    private void btn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn8ActionPerformed
        expression += "8";
        evalExpression += "8";
        Display();
    }//GEN-LAST:event_btn8ActionPerformed

    private void btn0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn0ActionPerformed
        expression += "0";
        evalExpression += "0";
        Display();
    }//GEN-LAST:event_btn0ActionPerformed

    private void nearestIntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nearestIntActionPerformed
        
        // Set global variable round to 1 to let the program know to round to the Nearest Integer.
        round = 0;
    }//GEN-LAST:event_nearestIntActionPerformed

    private void btnCloseBracketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseBracketsActionPerformed
        expression += ")";
        evalExpression += " ) ";
        Display();
    }//GEN-LAST:event_btnCloseBracketsActionPerformed

    private void btnOpenBracketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenBracketsActionPerformed
        expression += "(";
        evalExpression += " ( ";
        Display();
    }//GEN-LAST:event_btnOpenBracketsActionPerformed

    private void btnEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEqualsActionPerformed
        evalExpression += " )";
        
        // Error handling.
        try{
            
            // Evaluate the expression.
            expression = evaluate(postFix(evalExpression));
            
            // Rounds based on value of global variable round.
            double calculate = Double.parseDouble(expression);
            switch(round){
                case 0:
                    calculate = Math.round(calculate);
                    break;
                case 1:
                    calculate = Math.ceil(calculate);
                    break;
                case 2:
                    calculate = Math.floor(calculate);
                    break;
            }
            expression = ((Double) calculate).toString();
        }catch(Exception e){
            expression = "Error";
        }
        Display();
        evalExpression = "( ";
        expression = "";
    }//GEN-LAST:event_btnEqualsActionPerformed

    private void btnACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnACActionPerformed
        
        // Reset expression and internal expression.
        expression = "";
        evalExpression = "( ";
        Display();
        
    }//GEN-LAST:event_btnACActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        
        // Exit program.
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void roundUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundUpActionPerformed
        
        // Set global variable round to 1 to let the program know to round up.
        round = 1;
    }//GEN-LAST:event_roundUpActionPerformed

    private void roundDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundDownActionPerformed
        
        // Set globale variable round to 2 to let the program know to round down.
        round = 2;
    }//GEN-LAST:event_roundDownActionPerformed

    private void dontRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dontRoundActionPerformed
        
        // Set global variable round to -1 to let the program know not to round.
        round = -1;
    }//GEN-LAST:event_dontRoundActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculatorDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn0;
    private javax.swing.JButton btn1;
    private javax.swing.JButton btn2;
    private javax.swing.JButton btn3;
    private javax.swing.JButton btn4;
    private javax.swing.JButton btn5;
    private javax.swing.JButton btn6;
    private javax.swing.JButton btn7;
    private javax.swing.JButton btn8;
    private javax.swing.JButton btn9;
    private javax.swing.JButton btnAC;
    private javax.swing.JButton btnCloseBrackets;
    private javax.swing.JButton btnDivide;
    private javax.swing.JButton btnEquals;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnMultiply;
    private javax.swing.JButton btnOpenBrackets;
    private javax.swing.JButton btnPlus;
    private javax.swing.JMenuItem dontRound;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem nearestInt;
    private javax.swing.JMenuItem roundDown;
    private javax.swing.JMenuItem roundUp;
    private javax.swing.JTextField txtDisplay;
    // End of variables declaration//GEN-END:variables
}
